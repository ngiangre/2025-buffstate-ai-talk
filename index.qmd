---
title: "Building Data Products for Precision Medicine: Insights from Industry"
author: Nick Giangreco, PhD
format: 
  revealjs:
    slide-number: true
    incremental: true
    mermaid:
      theme: default
    css: styles.css
mermaid-format: svg
---

![](https://media4.giphy.com/media/v1.Y2lkPTc5MGI3NjExNndhN3BwNmc0aXBtZmNnZTR0bjlqcTV3bDFkbnF4OWxpNmd0aXQ0biZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/fnuSiwXMTV3zmYDf6k/giphy.gif){fig-align="center"}

### Hi, I'm Nick ðŸ‘‹

::::: columns
::: {.nonincremental .column width="60%"}
-   Biochemistry background
-   Self-taught bioinformatician
-   Research scientist in biomedical data science
-   Returned to Buffalo during COVID
-   (Remote) Engineer for Precision Medicine
    -   'Science to Medicines' mission
    -   Not a tech organization
:::

::: {.column width="40%"}
```{r diagrammr_timeline}

DiagrammeR::mermaid(diagram = '
graph BT
  HS(High School)-->College("Biochemistry
                             @ University of Rochester")
  College-->Postbac("Bioinformatics
                     @ NIH")
  Postbac-->PhD("Systems Biology
                 @ Columbia University")
  PhD-->Job("Precision Medicine
             @ Regeneron")
')
  
```
:::
:::::

### This presentation is my perspective doing data science in industry

-   I really liked academia and doing biomedical data science research

    -   I was pretty OK at it too: \~ 12 papers with 6 as first author
    -   No LLMs at that time!

-   No one told me the difference between academic vs. industry work

-   There's some key lessons and insights that I wish I knew beforehand

-   I'd like to share **insights/tips** as an early-career data scientist

### This is an N=1, results may vary, perspectives are my own

![](https://media1.giphy.com/media/v1.Y2lkPTc5MGI3NjExd2lvZXVxbHZ1aHE1YXhuNHMyaHA3ZWYxOTlqdGxlOTE4eHJuNjZlMyZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/3o7btQT3dWrTI7pFZK/giphy.gif){fig-align="center"}

### Tip 1 of 4: Making your work *transparent* can be **more important** than completing assigned work

-   You (and your team) are assigned work including dozens of projects

-   Stakeholders are consumers and producers of your work

-   Senior Leadership (SL) are consulted/informed for prioritization.

-   Managers/Directors are accountable to SL

-   If Managers/Directors can't communicate your work, how will SL know?

###

Here's an example workflow that would communicate your work to Leadership

::::: columns
::: {.center .column width="100%"}

```{r reporting}
library(visNetwork)

# Define nodes (more spread out for longer arrows)
nodes <- data.frame(
  id = 1:3,
  label = c(
    "API or Persistent Database",
    "Jira/Excel/Database or anything you can easily edit",
    "Scheduled Report/Google Docs"
  ),
  shape = "box",
  color = list(
    background = "#F8F8FF",
    border = "#CCCCFF",
    highlight = list(background = "#F0F8FF", border = "#8888FF")
  ),
  font = list(size = 16),
  x = c(0, -150, 150),   # Spread nodes wider apart horizontally
  y = c(-100, 50, 50)  # Increase vertical spacing for longer edges
)

# Define edges with curved paths to preserve circular flow
edges <- data.frame(
  from = c(1, 2, 3),
  to   = c(2, 3, 1),
  arrows = "to",
  smooth = list(enabled = TRUE, type = "curvedCW", roundness = 0.2),
  width = 2
)

# Build network
visNetwork(nodes, edges, width = "100%", height = "600px") %>%
  visEdges(smooth = TRUE) %>%
  visPhysics(enabled = FALSE) %>%
  visNodes(borderWidth = 2, shape = "box", shadow = TRUE)
  
```

:::
:::::
###

Give management your book of work with summaries so that the corporate machine keeps running

![](https://media4.giphy.com/media/v1.Y2lkPTc5MGI3NjExdXp1Znd3Z2ZkYmZrczVncWhrbGhiamNta2dkeHcxOGU4azU3anBxcyZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/Ui3OlvcLJk4LiMZNQ4/giphy.gif){fig-align="center"}

### Tip 2 of 4: Let your collaborators/stakeholders explore the data

###

This is an example for interactively examining interesting data points using Observable JS

```{ojs ojs_load_data}
data = FileAttachment("https://raw.githubusercontent.com/allisonhorst/palmerpenguins/refs/heads/main/inst/extdata/penguins.csv").csv({ typed: true })
```

```{ojs ojs_filter_data}
//| panel: sidebar

viewof bill_length_min = Inputs.range(
  [32, 50], 
  {value: 35, step: 1, label: "Bill length (min):"}
)

viewof islands = Inputs.checkbox(
  ["Torgersen", "Biscoe", "Dream"], 
  { value: ["Torgersen", "Biscoe", "Dream"], 
    label: "Islands:"
  }
)

filtered = data.filter(function(penguin) {
  return bill_length_min < penguin.bill_length_mm &&
         islands.includes(penguin.island);
})
```

::: {.panel-tabset}

#### Plot

```{ojs ojs_plot_data}

Plot.plot({
  inset: 8,
  grid: true,
  color: {
    legend: true,
  },
  marks: [
    Plot.dot(filtered, {x: "flipper_length_mm", y: "body_mass_g", stroke: "species"})
  ]
})
```

#### Table

```{ojs ojs_filter_table}
Inputs.table(filtered)
```

:::

###

This is an example for interactively examining interesting data points using R

```{r crosstalk}
library(crosstalk)
library(ggplot2)

# Wrap data frame in SharedData
dat <-
  dplyr::bind_rows(
    tibble::tibble(
      subject = paste0("Subject ",1:10),
      biomarker = rexp(10,rate = 1/5),
      disease = "stage 1"
    ),
    tibble::tibble(
      subject = paste0("Subject ",11:20),
      biomarker = rexp(10,rate = 1/7),
      disease = "stage 2"
    ), 
    tibble::tibble(
      subject = paste0("Subject ",21:30),
      biomarker = rexp(10,rate = 1/15),
      disease = "stage 3"
    )
  ) |>
    dplyr::mutate(
      biomarker = round(biomarker, 3),
      disease = factor(disease, levels = c("stage 1", "stage 2", "stage 3"))
    )

sd <- SharedData$new(dat)

pltly <-
  plotly::ggplotly(
    ggplot(sd,
      aes(disease,biomarker,fill = disease)
    ) + 
    geom_jitter(pch = 21,size = 4,height=0) +
    scale_fill_viridis_d()
  ) |>
    plotly::style(hoverlabel = list(bgcolor = "white")) |>
    plotly::layout(
      showlegend = FALSE,
      width = 400, height = 600  
    ) |>
    plotly::highlight(
      on = "plotly_selected", 
      off = "plotly_deselect",
      persistent = TRUE
    ) |>
    plotly::highlight(
      on = "plotly_click", 
      off = "plotly_doubleclick",
      persistent = TRUE
    ) |>
      plotly::config(displayModeBar = FALSE)
tbl <-
  DT::datatable(
    sd,
    width = '400px', height = '700px',
    extensions = 'Scroller',
    fillContainer = TRUE,
    options = list(
      deferRender = TRUE,
      scrollY = 300,
      scroller = TRUE
    )
  ) |>
    DT::formatStyle(
      columns = colnames(dat),
      fontSize="24px"
    )
bscols(
  pltly,
  tbl,
  widths = c(5,7)
)
```


### Tip 3 of 4 Always compare results of your complex models to simple, known, and understood models

-   Ensure your data science/analytics is interpretable!

###

```{r inference}
#| fig.width: 8
#| fig.height: 8
#| fig-align: center

library(patchwork)

set.seed(123)

# -----------------------------------------------------------------------------
# MODEL 1: Fold Change Between Stages
# -----------------------------------------------------------------------------
folds <- dat |>
  dplyr::group_by(disease) |>
  dplyr::summarise(mean_biomarker = mean(biomarker), .groups = "drop") |>
  dplyr::mutate(
    fold_change_vs_stage1 = mean_biomarker / mean_biomarker[disease == "stage 1"][1]
  )

fold_plot <-
  ggplot(dat, aes(disease, biomarker)) +
  geom_violin(alpha = 0.3) +
  geom_jitter(size = 1,height = 0, width = .1) +
  scale_fill_viridis_d() +
  geom_text(
    data = folds,
    aes(
      y = max(dat$biomarker) * 0.95,
      label = sprintf("FC: %.2f", fold_change_vs_stage1)
    ),
    nudge_y = 5, size = 3
  ) +
  ggtitle("Model 1: Fold Change Between Disease Stages") +
  theme_minimal()

# -----------------------------------------------------------------------------
# MODEL 2: Linear Regression
# -----------------------------------------------------------------------------
lm_fit <- lm(biomarker ~ disease, data = dat)
lm_summary <- broom::tidy(lm_fit)

pred_lm <- dat |>
  dplyr::mutate(pred = predict(lm_fit, newdata = dat))

p_lm <-
  ggplot(pred_lm, aes(disease, biomarker)) +
  geom_violin(alpha = 0.3) +
  geom_jitter(aes(color = "Observed"), size = 1,height = 0, width = .1) +
  geom_boxplot(outlier.shape = NA,alpha = 0, width = 0.05,color = "gray30") +
  geom_point(aes(y = pred, color = "Predicted"), size = 3) +
  scale_color_manual(values = c("Observed" = "black", "Predicted" = "red")) +
  scale_y_continuous(breaks = scales::pretty_breaks(20)) +
  guides(color = guide_none()) +
  ggtitle("Model 2: Linear Regression (lm)") +
  theme_minimal()

# -----------------------------------------------------------------------------
# MODEL 3: Bayesian Regression
# -----------------------------------------------------------------------------
brm_fit <- brms::brm(
  formula = biomarker ~ disease,
  data = dat,
  family = gaussian(),
  chains = 2, iter = 2000, refresh = 0
)

posterior_df <- brms::as_draws_df(brm_fit)

# Columns usually look like: "b_Intercept", "b_diseaseStage2", "b_diseaseStage3"
posterior_long <- 
  posterior_df |>
  dplyr::select(starts_with("b_")) |>
  tidyr::pivot_longer(
    everything(), 
    names_to = "parameter", 
    values_to = "estimate"
  )  |>
  dplyr::mutate(
    parameter = dplyr::case_when(
      parameter == "b_Intercept" ~ "stage 1",
      parameter == "b_diseasestage2" ~ "stage 2",
      parameter == "b_diseasestage3" ~ "stage 3"
    ) |> 
      factor(levels = c("stage 1", "stage 2", "stage 3"))
  )

p_brm <-
  # Plot the posterior for each beta
  ggplot(posterior_long, 
    aes(x = parameter, y = estimate, fill = parameter)
  ) +
  geom_violin(alpha = 0.5, width = 1.2, show.legend = FALSE) +
  geom_boxplot(outlier.shape = NA,alpha = 0, width = 0.05,color = "gray30", show.legend = FALSE) +
  geom_vline(xintercept = 0, linetype = "dashed") +
  scale_y_continuous(breaks = scales::pretty_breaks(20)) +
  labs(
    title = "Posterior distributions of regression coefficients",
    x = "Estimate",
    y = NULL
  ) +
  scale_fill_viridis_d() +
  ggtitle("Model 3: Bayesian Regression (brms)") +
  theme_minimal()

# -----------------------------------------------------------------------------
# Combine Plots
# -----------------------------------------------------------------------------
design <- "
  ##AAA##
  BBBCCCC
  BBBCCCC
"
fold_plot + p_lm + p_brm +
  plot_annotation(
    title = "Comparing Models: Disease Stage Effects on Biomarker Levels"
  ) +
    plot_layout(design = design)

```

### Tip 4 of 4: Learn how to use AI to make yourself more productive

-   At a company, you have deliverables, priorities, limited resources, and timelines
-   Leverage tools to make good use of available  resources
-   Big companies usually have an internal LLM resource
-   Many public, paid LLM API options
-   Use them for drafts/initial start, but you are the expert!
-   This presentation involved 50/50 ChatGPT + me 

### Lessons from a former graduate student

-   Do internships
-   Take advantage of being a student
    -   Network!
    -   Learn as much as you can!
    -   Experience helps
-   Invest in your career
    -   Go to conferences
    -   Identify your domain
    -   Learn what energizes you
    -   Find your people

### Closing

-   Student years: practice resilience, curiosity, communication, and NETWORKING!
-   Industry: focus on communication and impact
-   Final message: use your student time to build skills + mindset for impact